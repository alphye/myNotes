Thread.sleep(t);当前线程等待t毫秒，但不释放锁，t毫秒之后，重新去竞争时间片，进入运行状态。但不一定立马会获取到。
t1.wait(t); 当前线程等待t毫秒，释放锁，t毫秒之后，重新获取锁，进入运行状态。但不一定立马获取到，如果有别的线程占用着锁，则等待别的线程
t1.wait();当前线程进入等待，释放锁，需其他线程唤醒才会重新获取锁，进入运行状态。但不一定立马获取到，如果有别的线程占用着锁，则等待别的线程
obj.notify();唤醒在obj对象上等待的线程，如果有多个线程都在obj对象上等待，只唤醒其中一个，随机选择。
obj.notifyAll();唤醒在obj对象上等待的所有线程.
t1.join();父线程等待子线程执行，子线程执行结束之后，父线程中"t1.join();"后面的代码才开始执行。
t1.join(long t); 父线程等待子线程执行t毫秒，t毫秒后，父线程中"t1.join();"后面的代码才开始执行。
-- 引申：：如果把一个Thread的对象t1作为某个线程的对象锁，则t1线程执行结束时，会唤醒所有在t1上wait的线程

syncnronized，可加在方法上，也可加在代码块上，加在方法上等同于synchronized(this)
当一线程运行到有synchronized修饰的方法或代码块中时，也就意味着该线程持有了synchronized所指定的锁对象，
那么这时候，其他线程不可再进入synchronized指定的锁对象所修饰的任何方法或代码块。例：
public class Test{
	public synchronized void test1(){......}
	public synchronized void test2(){......}
	public synchronized void test3(){......}
	public  void test4(){......}
}
对于Test类的对象test而言，如果一个线程正在执行test1方法，则其他的线程是不能进入test对象的test2  test3方法的，但可以进入test4方法
